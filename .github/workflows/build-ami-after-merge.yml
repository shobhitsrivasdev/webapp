name: Build AMI after PR is merged

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_PORT: ${{ secrets.PGPORT }}
          POSTGRES_HOST: ${{ secrets.PGHOST }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: "Create env file"
        run: |
          touch .env
          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
          echo PGUSER=${{ secrets.PGUSER }} >> .env
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
          echo PGPORT=${{ secrets.PGPORT }} >> .env
          echo PGHOST=${{ secrets.PGHOST }} >> .env
          echo "cat .env"
          cat .env
          echo "ls -a ."
          ls -a .
          echo "ls -a ${{ github.workspace }}"
          ls -a ${{ github.workspace }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run test:integration

  build-ami:
    needs: build-and-test
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: "Create env file"
        run: |
          touch .env
          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
          echo PGUSER=${{ secrets.PGUSER }} >> .env
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
          echo PGPORT=${{ secrets.PGPORT }} >> .env
          echo PGHOST=${{ secrets.PGHOST }} >> .env
          echo CSVPATH=$"~/opt/users.csv" >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}  >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }}  >> .env
          echo "cat .env"
          cat .env
          echo "ls -a ."
          ls -a .
          echo "ls -a ${{ github.workspace }}"
          ls -a ${{ github.workspace }}

      - name: Packer variables
        run: |
          touch ami.pkrvars.hcl
          echo SOURCE_AMI=\"${{ vars.SOURCE_AMI }}\" >> ami.pkrvars.hcl
          echo INSTANCE_TYPE=\"${{ vars.INSTANCE_TYPE }}\" >> ami.pkrvars.hcl
          echo REGION=\"${{ vars.REGION }}\" >> ami.pkrvars.hcl
          echo PROFILE=\"${{ vars.PROFILE }}\" >> ami.pkrvars.hcl
          echo SSH_USERNAME=\"${{ vars.SSH_USERNAME }}\" >> ami.pkrvars.hcl
          echo AMI_USERS=\"${{ vars.AMI_USERS }}\" >> ami.pkrvars.hcl
          echo OS_NAME=\"${{ vars.OS_NAME }}\" >> ami.pkrvars.hcl
          echo OS_ROOT_TYPE=\"${{ vars.OS_ROOT_TYPE }}\" >> ami.pkrvars.hcl
          echo OS_VER=\"${{ vars.OS_VER }}\" >> ami.pkrvars.hcl
          echo DEVICE_NAME=\"${{ vars.DEVICE_NAME }}\" >> ami.pkrvars.hcl
          echo VOLUME_SIZE=\"${{ vars.VOLUME_SIZE }}\" >> ami.pkrvars.hcl
          echo VOLUME_TYPE=\"${{ vars.VOLUME_TYPE }}\" >> ami.pkrvars.hcl
      - name: Step 2 - zip all the webapp files
        run: |
          zip -r webapp.zip ./
          pwd ./webapp
      - name: Install Packer
        run: |
          PACKER_VERSION="1.9.4"  # specify your desired version
          wget https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip packer_${PACKER_VERSION}_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version
      - name: Initialize Packer
        run: packer init ami.pkr.hcl

      - name: Build AMI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: "packer build --var-file=ami.pkrvars.hcl ami.pkr.hcl"
      - name: Configure AWS credentials for DEMO account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-west-1
      
      - name: Update AWS Launch Template Config and Refresh Instances
        run: |
          sudo apt-get install jq
 
          ASG_NAME="asg_launch_config"
          LAUNCH_CONFIG="asg_launch_config"
 
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
 
          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')
 
          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"
 
          # Update Auto Scaling Group to use new Launch Configuration with the latest version
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version='$Latest'
 
          # Start instance refresh
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME
 
          while true; do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              echo "Instance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              echo "Instance refresh failed!"
              exit 1
            fi
            sleep 10
          done